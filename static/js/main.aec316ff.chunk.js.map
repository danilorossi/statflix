{"version":3,"sources":["statflix_logo.png","assets/netflix_activity_page.png","assets/netflix_activity_download.png","assets/netflix_file.png","assets/drop_file.png","services/ntflxCsvParser.js","components/SiteHeader.js","components/HeaderHelp.js","globals/colors.js","components/HorizontalDivider.js","components/DropZone.js","components/FAQ/faqText.js","components/FAQ/FAQ.js","screens/MainScreen.js","components/charts/RadialChart.js","components/charts/BarChart.js","components/charts/CalendarChart.js","components/charts/YearTimelineChart.js","components/statistics/SimpleStats.js","components/statistics/FirstEpisode.js","screens/StatScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","parseCsv","csvString","rawData","Papa","data","shift","pop","yearSet","Set","accumulateByDayDictionary","accumulateByDayOfWeekDictionary","sampleData","map","entry","idx","_entry","Object","slicedToArray","title","_dateString$split","split","_dateString$split2","day","month","shortYear","formattedDateString","concat","date","Date","parse","add","getFullYear","item","year","getMonth","getDate","weekDay","getDay","key","objectSpread","count","items","keyWeekDay","sort","a","b","yearsList","Array","from","accumulateByWeekDay","values","episodesPerMonth","computeAccumulateByMonth","mostActiveDay","episodesPerYear","yearData","reduce","acc","curr","console","log","computeSimilarities","dictionary","forEach","searchKey","recursionEntry","startsWith","list","filter","d","length","push","defineProperty","entries","keys","k","SiteHeader","react_default","createElement","alt","src","statflixLogo","Label","as","color","HeaderHelp","style","padding","textAlign","List","bulleted","Item","Popup","inverted","position","trigger","target","href","Header","Content","width","netflixActivityPage","netflixActivityDownload","netflixFile","dropFile","CUSTOM_RED","HorizontalDivider","_ref","text","Divider","horizontal","MyDropzone","onComplete","onDrop","useCallback","acceptedFiles","reader","FileReader","onabort","onerror","onload","binaryStr","result","file","readAsText","_useDropzone","useDropzone","getRootProps","getInputProps","assign","className","styles","dropZone","margin","fontSize","border","borderRadius","cursor","faqText","sections","body","FAQ","state","activeIndex","handleClick","e","titleProps","index","newIndex","_this","setState","_this2","this","Segment","container","Accordion","section","i","Fragment","Title","active","onClick","Icon","name","Component","paddingLeft","paddingRight","backgroundColor","MainScreen","onFileUploaded","Grid","columns","Column","FAQ_FAQ","height","RadialChart","selected","_useState","useState","_useState2","paths","setPaths","_useState3","_useState4","tempAnnotations","setTempAnnotations","useEffect","_processData","radiusScale","d3","range","colorScale","_d3$extent","_d3$extent2","minCount","maxCount","domain","arcGenerator","perSliceAngle","Math","PI","fill","path","startAngle","endAngle","innerRadius","outerRadius","temp","r","processData","transform","stroke","strokeWidth","y","textAnchor","BarChart","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","barsWidth","bars","xScale","max","yScale","colorExtent","reverse","interpolator","x","bandwidth","points","fontWeight","React","cellMargin","cellSize","monthName","week","CalendarChart","weeksInMonth","m","floor","offset","getMonthWidth","getTextX","months","days","yearEntries","minDate","maxDate","accByDate","prevProps","prevState","_this$state","id","monthDate","all","data-month","j","rx","ry","_accumulateByDayDicti","rect","flowing","maxWidth","toDateString","circular","big","floating","SimpleStats","headerText","value","footerText","_ref$iconClass","iconClass","Statistic","size","Value","FirstEpisodeStatistics","episode","timeAgo","setTimeAgo","dayOfWeek","setDayOfWeek","TimeAgo","addLocale","en","format","statistics_SimpleStats","StatScreen","currentYear","setEpisodePerMonth","setYear","FirstEpisode","charts_BarChart","toConsumableArray","episodesXMonth","charts_CalendarChart","getYearSection","App","_parseCsv","dataLoaded","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aec316ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/statflix_logo.6aa9ce9f.png\";","module.exports = __webpack_public_path__ + \"static/media/netflix_activity_page.240e7f69.png\";","module.exports = __webpack_public_path__ + \"static/media/netflix_activity_download.c4c27b7f.png\";","module.exports = __webpack_public_path__ + \"static/media/netflix_file.7fa8a41c.png\";","module.exports = __webpack_public_path__ + \"static/media/drop_file.d6080f6a.png\";","import * as Papa from 'papaparse';\n// import stringSimilarity from 'string-similarity';\n\nexport const parseCsv = (csvString) => {\n  var result = Papa.parse(csvString);\n  const rawData = result.data;\n  rawData.shift();\n  rawData.pop();\n\n  const yearSet = new Set();\n\n  const accumulateByDayDictionary = {};\n  const accumulateByDayOfWeekDictionary = {};\n\n  const sampleData = rawData.map((entry, idx) => {\n    const [ title, dateString ] = entry;\n    const [ day, month, shortYear ] = dateString.split('/');\n    // TODO assure year is correct\n    // TODO expect different formats?\n    const formattedDateString = `20${shortYear}-${month}-${day}`;\n    const date = new Date(Date.parse(formattedDateString));\n    yearSet.add(date.getFullYear());\n    const item = {\n      title,\n      date,\n      year: date.getFullYear(),\n      month: date.getMonth() + 1,\n      day: date.getDate(),\n      weekDay: date.getDay(),\n    }\n\n    const key = `${item.day}-${item.month}-${item.year}`;\n    if(!accumulateByDayDictionary[key]) {\n      accumulateByDayDictionary[key] = {\n        count: 1,\n        year: item.year,\n        month: item.month,\n        day: item.day,\n        weekDay: item.weekDay,\n        date,\n        items: [item]\n      };\n    } else {\n      accumulateByDayDictionary[key] = {\n        ...accumulateByDayDictionary[key],\n        count: accumulateByDayDictionary[key].count + 1,\n        items: accumulateByDayDictionary[key].items.concat(item)\n      }\n    }\n\n    const keyWeekDay = item.weekDay;\n    if(!accumulateByDayOfWeekDictionary[keyWeekDay]) {\n      accumulateByDayOfWeekDictionary[keyWeekDay] = {\n        count: 1,\n        weekDay: item.weekDay,\n        date,\n        items: [item]\n      };\n    } else {\n      accumulateByDayOfWeekDictionary[keyWeekDay] = {\n        ...accumulateByDayOfWeekDictionary[keyWeekDay],\n        count: accumulateByDayOfWeekDictionary[keyWeekDay].count + 1,\n        items: accumulateByDayOfWeekDictionary[keyWeekDay].items.concat(item)\n      }\n    }\n    return item;\n  }).sort((a, b) => a.date - b.date);\n\n  const yearsList = Array.from(yearSet).sort((a, b) => a - b);\n  // const accumulateByDayDictionary = Object.values(accumulateByDayDictionary);\n  const accumulateByWeekDay = Object.values(accumulateByDayOfWeekDictionary).sort((a, b) => b.count - a.count);\n\n  const episodesPerMonth = yearsList.map(year =>\n    ({ year, data: computeAccumulateByMonth(sampleData, year) })\n  ).sort((a, b) => a.year - b.year);\n\n\n  const mostActiveDay = Object.values(accumulateByDayDictionary).sort((a, b) => b.count - a.count)[0]\n  const episodesPerYear = episodesPerMonth.map(yearData => {\n\n      const count = yearData.data.reduce((acc, curr) => {\n        return acc + curr.count\n      }, 0);\n\n      return {\n        year: yearData.year,\n        count,\n      }\n  }).sort((a, b) => a.year - b.year);\n\n\n\n  // Episodes in general per day?\n\n  // Most seen per month\n\n  // Time to finish Series (or season would be great)\n\n  // hours spent per week\n\n  // day of week you watch netflix the most\n  console.log(computeSimilarities(sampleData))\n  return {\n    yearsList,\n    sampleData,\n    episodesPerMonth,\n    episodesPerYear,\n    mostActiveDay,\n    accumulateByDayDictionary,\n    accumulateByWeekDay,\n  }\n\n}\n\n\nexport const computeSimilarities = sampleData => {\n\n  let dictionary = {};\n\n  sampleData.forEach(entry => {\n    const searchKey = entry.title.split(':')[0];\n\n    sampleData.forEach(recursionEntry => {\n\n      if(recursionEntry.title.startsWith(searchKey)) {\n        const list = dictionary[searchKey] || [];\n        const match = list.filter(d => d.title === recursionEntry.title)\n        if(match.length === 0) {\n          list.push({...recursionEntry})\n          dictionary[searchKey] = list//.sort((a, b) => a.date - b.date);\n        }\n\n      }\n    })\n\n  })\n\n  console.log(dictionary)\n  return null\n\n\n\n\n  // const result = stringSimilarity.findBestMatch(\n  //   sampleData[0].title,\n  //   sampleData.map(data => data.title)\n  // )\n  //\n  // console.log('Homeland episodes : ' +sampleData.filter(s => s.title.startsWith('Homeland')).length)\n  // console.log(result)\n  //\n  // const firstPass = result.ratings.filter(entry => entry.rating > 0.7)\n  // console.log('> 0.7: ' + firstPass.length, firstPass)\n  //\n  // const x = stringSimilarity.findBestMatch(\n  //   sampleData[0].title.substring(0, 7),\n  //   firstPass.map(data => data.target.substring(0, 7))\n  // )\n  //\n  // return x.ratings.filter(entry => entry.rating > 0.5)\n}\n\nexport const computeAccumulateByMonth = (sampleData, year) => {\n    const dictionary = sampleData.reduce((acc, curr) => {\n\n      if( curr.year !== year ) return acc;\n\n      const key = `${curr.year}-${curr.month}-01`;\n      const entry = acc[key];\n\n      if(entry) {\n        return {\n          ...acc,\n          [key]: {\n            ...entry,\n            key,\n            entries: acc[key].entries.concat(curr),\n            count: entry.count + 1\n          }\n        }\n      } else {\n        return {\n          ...acc,\n          [key]: {\n            key,\n            month: curr.month,\n            date: curr.date,\n            year: curr.year,\n            entries: [curr],\n            count: 1\n          }\n        };\n      }\n\n    }, {});\n    return Object.keys(dictionary).map(k => dictionary[k]);\n  }\n","import React from 'react';\nimport statflixLogo from '../statflix_logo.png';\nimport { Label } from 'semantic-ui-react';\n\nexport default function SiteHeader() {\n  return (\n    <div>\n      <img alt=\"Web page logo\" src={statflixLogo}  />\n      <div>\n        <Label as='span' color='red'>BETA</Label>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { List, Popup } from 'semantic-ui-react';\nimport netflixActivityPage from '../assets/netflix_activity_page.png';\nimport netflixActivityDownload from '../assets/netflix_activity_download.png';\nimport netflixFile from '../assets/netflix_file.png';\nimport dropFile from '../assets/drop_file.png';\n\nexport default function HeaderHelp() {\n  return (\n    <div style={{ padding: '10% 10% 0 10%', color: 'white', textAlign: 'left' }}>\n    <List bulleted>\n      <List.Item>Visit\n        <Popup inverted\n          position='bottom center'\n          trigger={\n            <a target=\"_blank\" href=\"https://netflix.com/viewingactivity\"> Netflix viewing activity page </a>\n          }\n        >\n          <Popup.Header>\n            https://netflix.com/viewingactivity\n          </Popup.Header>\n          <Popup.Content>\n            <img alt=\"\" style={{ width: '500px' }} src={ netflixActivityPage } />\n          </Popup.Content>\n        </Popup>\n         - you will have to login on Netflix first, and select a profile\n      </List.Item>\n\n      <List.Item>At the bottom of the activity page, click on the\n        <Popup inverted\n          position='bottom center'\n          trigger={\n            <a target=\"_blank\" href=\"https://netflix.com/viewingactivity\"> download all </a>\n          }\n        >\n          <Popup.Header>\n            Download activity file\n          </Popup.Header>\n          <Popup.Content>\n            <img alt=\"\" style={{ width: '500px' }} src={ netflixActivityDownload } />\n          </Popup.Content>\n        </Popup>\n        link\n      </List.Item>\n\n      <List.Item>\n      Locate the downloaded file,\n        <Popup inverted\n          position='bottom center'\n          trigger={\n            <i> NetflixViewingHistory.csv</i>\n          }\n        >\n          <Popup.Content>\n            <img alt=\"\" style={{  }} src={ netflixFile } />\n          </Popup.Content>\n        </Popup>\n\n      , and\n        <Popup inverted\n          position='bottom center'\n          trigger={\n            <span>drag & drop it</span>\n          }\n        >\n          <Popup.Header>\n            https://netflix.com/viewingactivity\n          </Popup.Header>\n          <Popup.Content>\n            <img alt=\"\" style={{ width: '500px' }} src={ dropFile } />\n          </Popup.Content>\n        </Popup>\n       on the box below - or click on the box to select it from your file system.\n      </List.Item>\n    </List>\n\n    </div>\n  );\n};\n","export const CUSTOM_RED = '#e50914';\n","import React from 'react';\nimport { CUSTOM_RED } from '../globals/colors';\nimport { Divider, Header } from 'semantic-ui-react';\n\nexport default function HorizontalDivider({ text }) {\n  return (\n    <Divider horizontal inverted>\n      {text && <Header style={{ color:  CUSTOM_RED }} as='h5'>{ text }</Header>}\n    </Divider>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { CUSTOM_RED } from '../globals/colors';\nimport HorizontalDivider from './HorizontalDivider';\n\nexport default function MyDropzone({ onComplete }) {\n\n  const onDrop = useCallback(acceptedFiles => {\n    const reader = new FileReader()\n    reader.onabort = () => console.log('file reading was aborted')\n    reader.onerror = () => console.log('file reading has failed')\n    reader.onload = () => {\n      const binaryStr = reader.result\n      onComplete(binaryStr)\n    }\n\n    acceptedFiles.forEach(file => reader.readAsText(file))\n  }, [ onComplete ])\n\n  const { getRootProps, getInputProps } = useDropzone({ onDrop })\n\n  return (\n    <div className=\"dropzone\" style={styles.dropZone} {...getRootProps()}>\n      <input { ...getInputProps() } />\n      <p>Drop Netflix viewing history CSV file</p>\n      <HorizontalDivider text=\"OR\" />\n      <p>click to select the file</p>\n    </div>\n  )\n};\n\nconst styles = {\n  dropZone: {\n    padding: '5%',\n    margin: '10% 10% 0',\n    color: 'lightgrey',\n    fontSize: '1em',\n    border: '5px solid rgb(222, 59, 48)',\n    borderRadius: '10px',\n    cursor: 'pointer',\n  },\n};\n","export const faqText = {\n  sections: [\n    {\n      title: 'What is this?',\n      body : `\n      This website will give you some fun facts and stats about\n      your Netflix viewing activity, based on the activty file you\n      can download from the Netflix activity page.\n      `\n    }, {\n      title: 'Why did you do this?',\n      body : `\n      I am a software engineer and I work on a variety of side projects to learn\n      new technologies and refresh things I used in the past: this specific\n       project is an excuse to see how to combine two technology, React and d3js.\n      `\n    }, {\n      title: 'What do you do with my activity data?',\n      body : `\n      Really, I just do some calculations and show some statistics.\n      The file you upload in this page does not contain any sensitive information,\n      it's just a list of titles and dates (just the date, no time), you can check\n      yourself by opening it with your favourite text editor or as a spreadsheet.\n      I do not store any of it and I do not have access to your Netflix credentials:\n      once you reload this webpage, it's like you never uploaded it :)\n      `\n    }, {\n      title: 'Why the title says \"BETA\"?',\n      body: `\n      This is a work in progress pet project, nothing is final, not even the title:\n      I hope to improve the page and provide even more interesting insights and\n      cool visualizations, but I do not promise anything :)\n      `\n    }\n  ]\n}\n","import React, { Component } from 'react'\nimport { Accordion, Icon, Segment } from 'semantic-ui-react'\n// import ReactMarkdown from 'react-markdown';\n\nimport { faqText } from './faqText';\n\nexport default class FAQ extends Component {\n  state = { activeIndex: 0 }\n\n  handleClick = (e, titleProps) => {\n    const { index } = titleProps\n    const { activeIndex } = this.state\n    const newIndex = activeIndex === index ? -1 : index\n\n    this.setState({ activeIndex: newIndex })\n  }\n\n  render() {\n    const { activeIndex } = this.state\n\n    return (\n      <Segment inverted style={ styles.container }>\n        <Accordion inverted>\n          {  \n            faqText.sections.map((section, i) => (\n              <React.Fragment key={`faq_${i}`}>\n                <Accordion.Title active={activeIndex === i} index={i} onClick={this.handleClick}>\n                  <Icon name='dropdown' /> { section.title }\n                </Accordion.Title>\n                <Accordion.Content active={activeIndex === i}>\n                  { section.body }\n                  {/*<ReactMarkdown source={ section.body } />*/}\n                </Accordion.Content>\n              </React.Fragment>\n            ))\n          }\n        </Accordion>\n      </Segment>\n    )\n  }\n}\n\n\nconst styles = {\n  container: {\n    paddingLeft: '10%',\n    paddingRight: '10%',\n    backgroundColor: 'rgb(20, 20, 20)',\n    fontSize: '1.2em'\n  },\n};\n","import React from 'react';\nimport { Grid } from 'semantic-ui-react'\nimport DropZone from '../components/DropZone';\nimport FAQ from '../components/FAQ/FAQ';\n\n\nexport default function MainScreen({ onFileUploaded }) {\n  return (\n    <Grid columns={1}>\n\n      <Grid.Column>\n        <DropZone onComplete={onFileUploaded}/>\n      </Grid.Column>\n\n      <Grid.Column textAlign='left'>\n        <FAQ> </FAQ> \n      </Grid.Column>\n\n    </Grid>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst width = 400;\nconst height = 200;\n\nexport default function RadialChart({ selected, data }) {\n\n  const processData = (data) => {\n    if (!data) {\n      return {\n        paths: [],\n        tempAnnotations: []\n      }\n    }\n\n    const radiusScale = d3.scaleLinear().range([0, 100])\n    const colorScale = d3.scaleSequential(d3.interpolateReds)\n\n    const [minCount, maxCount] = d3.extent(data, d => d.count);\n    radiusScale.domain([0, maxCount]);\n    colorScale.domain([maxCount*1.5, minCount]);\n\n    // one arc per day, innerRadius is low temp, outerRadius is high temp\n    const arcGenerator = d3.arc()\n    const perSliceAngle = (2 * Math.PI) / data.length;\n    const paths = data.map((d, i) => {\n      return {\n        fill: colorScale(d.count),\n        path: arcGenerator({\n          startAngle: i * perSliceAngle,\n          endAngle: (i + 1) * perSliceAngle,\n          innerRadius: radiusScale(0),\n          outerRadius: radiusScale(d.count),\n        }),\n      };\n    });\n\n    // const axesStep = Math.floor(maxCount/2)\n    // const step = Math.ceil((axesStep)/10)*10;\n    const tempAnnotations = [minCount, maxCount].map(temp => {\n      return {\n        r: radiusScale(temp),\n        temp\n      };\n    });\n    return { paths, tempAnnotations };\n  }\n\n  const [paths, setPaths] = useState([]);\n  const [tempAnnotations, setTempAnnotations] = useState([]);\n\n  useEffect(() => {\n    const { paths, tempAnnotations } = processData(data);\n    setPaths(paths);\n    setTempAnnotations(tempAnnotations);\n  }, [ data, selected ]);\n\n  return (\n    <svg width={width} height={height}>\n      <g transform={`translate(${width / 2}, ${height / 2})`}>\n        {paths.map((d, i) => (\n          <path key={i} d={d.path} stroke={d.fill} strokeWidth=\"2\" fill={d.fill} />\n        ))}\n        {tempAnnotations.map((d, i) => (\n          <g key={i}>\n            <circle r={d.r} fill=\"none\" stroke=\"#ffaaaa\" strokeWidth=\"1\"/>\n            <text y={-d.r - 2} textAnchor=\"middle\" fill=\"#ffaaaa\">\n              {d.temp}\n            </text>\n          </g>\n        ))}\n      </g>\n    </svg>\n  );\n}\n","import React from 'react';\nimport * as d3 from 'd3';\n\nconst width = 700;\nconst height = 150;\nconst margin = { top: 20, right: 20, bottom: 60, left: 20 };\n\nclass BarChart extends React.Component  {\n\n  barsWidth = 0;\n\n  processData(data) {\n    if (!data) {\n      this.setState({ bars: [] });\n      return;\n    }\n\n    // const extent = d3.extent(data, d => d.year);\n     const xScale = d3\n       .scaleBand().padding(0.2).domain(data.map(d => d.year).sort((a, b) => a.year - b.year))\n       //.scaleLinear().domain(extent)\n       .range([ margin.left, width - margin.right]);\n\n     const max = d3.max(data, d => d.count);\n     const yScale = d3\n       .scaleLinear()\n       .domain([ max, 0 ])\n       .range([ height - margin.bottom, margin.top ]);\n\n     // 3. map avg temp to color\n     // get min/max of avg\n     const colorExtent = d3.extent(data, d => d.count).reverse();\n     const colorScale = d3\n       .scaleSequential()\n       .domain([colorExtent[0]*1.5, colorExtent[1]])\n       .interpolator(d3.interpolateReds);\n\n\n     const bars = data.map(d => {\n       return {\n         x: xScale(d.year),\n         y: 0,//yScale(d.count),\n         year: d.year,\n         count: d.count,\n         height: yScale(d.count),\n         fill: colorScale(d.count)\n       };\n     });\n\n     if(bars) {this.barsWidth = xScale.bandwidth()}//Math.floor(width / bars.length);}\n    this.setState({ bars })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      bars: null\n    }\n  }\n  componentDidMount() {\n    this.processData(this.props.data);\n  }\n\n  render() {\n    const { title } = this.props;\n    const { bars } = this.state;\n    return (\n      <div style={{ width: \"100%\" }}>\n        {title && <h2>{ title }</h2>}\n        {bars &&\n        <svg width={width} height={height}>\n          {this.state.bars.map((d, i) => (\n            <React.Fragment key={`bar_chart_${i}`}>\n              <rect x={d.x} y={d.y} width={this.barsWidth} height={d.height+margin.top} fill={d.fill} />\n              <polygon strokeWidth=\"1\" fill={d.fill} stroke={d.fill} points={\n                `${d.x+1},${d.y+d.height+margin.top}\n                  ${d.x+(this.barsWidth/2)},${d.y+d.height+margin.top+20}\n                  ${d.x-1+this.barsWidth},${d.y+d.height+margin.top}`}  />\n              <text fontWeight=\"bold\" x={d.x + (this.barsWidth/2)} textAnchor=\"middle\" y={d.y + 20}  fill=\"white\">{d.year}</text>\n              <text fontWeight=\"bold\" x={d.x + (this.barsWidth/2)} y={d.y + d.height + 60} textAnchor=\"middle\" fill={d.fill}>\n                {d.count}\n              </text>\n            </React.Fragment>\n          ))}\n\n        </svg>\n        }\n      </div>\n    );\n  }\n}\n\nexport default BarChart;\n","import React from 'react';\nimport * as d3 from 'd3';\n\n\nimport { Popup, List, Icon, Label, Divider } from 'semantic-ui-react'\n\n// const width = 650;\n// const height = 400;\n// const margin = { top: 20, right: 5, bottom: 20, left: 35 };\n\nconst cellMargin = 2,\n    cellSize = 20;\nconst monthName = d3.timeFormat(\"%B\")\nvar day = d3.timeFormat(\"%u\"),\n    week = d3.timeFormat(\"%W\");\n    // format = d3.timeFormat(\"%Y-%m-%d\"),\n    // titleFormat = d3.utcFormat(\"%a, %d-%b\");\n\nclass CalendarChart extends React.Component  {\n\n  colorScale = null;\n\n  processData(data, accumulateByDayDictionary, selected) {\n    if (!data) {\n      this.setState({ months: [] });\n      return;\n    }\n    const yearData = data.filter(d => d.year === selected)[0].data;\n\n    // { data: [{month, entries}], year: 2015 }\n\n    // this.props.accByDate\n    /*\n    count: 2\n    date: Tue May 28 2019 00:00:00 GMT+0200 (Central European Summer Time) {}\n    day: 28\n    items: (2) [{…}, {…}]\n    month: 5\n    weekDay: 2\n    year: 2019\n    */\n\n    const yearEntries = yearData.reduce((acc, curr) => {\n      return acc.concat(curr.entries);\n    }, []);\n    //\n    //const [minCount, maxCount] = d3.extent(yearEntries, d => d.count);\n    this.colorScale = d3\n     .scaleSequential(d3.interpolateReds)\n     .domain([10, 0]);\n\n    var minDate = d3.min(yearEntries, d => d.date)\n    var maxDate = d3.max(yearEntries, d => d.date)\n\n\n\n\n\n    var months = d3.timeMonth.range(d3.timeMonth.floor(minDate), maxDate);\n    this.setState({ months, days: yearData, accumulateByDayDictionary })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      months: null,\n      days: null\n    }\n  }\n  componentDidMount() {\n    this.processData(this.props.data, this.props.accByDate, this.props.selected);\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.selected !== prevProps.selected) {\n      this.processData(this.props.data, this.props.accByDate, this.props.selected);\n    }\n  }\n\n  weeksInMonth = function(month){\n    var m = d3.timeMonth.floor(month)\n    return d3.timeWeeks(d3.timeWeek.floor(m), d3.timeMonth.offset(m,1)).length;\n  }\n  getMonthWidth = (month) => {\n   var columns = this.weeksInMonth(month);\n   return ((cellSize * columns) + (cellMargin * (columns + 1)));\n  }\n  getTextX = (month) => {\n    var columns = this.weeksInMonth(month);\n    return (((cellSize * columns) + (cellMargin * (columns + 1))) / 2);\n  }\n  render() {\n    const { months, days, accumulateByDayDictionary } = this.state;\n    return (\n      <div id=\"calendar\" style={{ padding: '0 10%' }}>\n        {\n          months && months.map((m, idx) => {\n            const width = this.getMonthWidth(m);\n            const monthDate = days[idx].date\n            const all = d3.timeDays(new Date(monthDate.getFullYear(), monthDate.getMonth(), 1), new Date(monthDate.getFullYear(), monthDate.getMonth()+1, 1));\n\n            return (\n              <svg className=\"month\"\n                key={idx}\n                style={{margin:\"10px\"}}\n                stroke=\"red\"\n                width={width} height={((cellSize * 7) + (cellMargin * 8) + 20)}\n                >\n                <g>\n                  <text\n                    textAnchor=\"middle\"\n                    className=\"month-name\"\n                    fill=\"white\"\n                    data-month={m}\n                    x={this.getTextX(m)}\n                    y={/*(cellSize * 7) + (cellMargin * 8) +*/ 15}> {monthName(m)} </text>\n\n                    {all.map((d, j) => {\n\n                        const x = (((week(d) - week(new Date(d.getFullYear(),d.getMonth(),1))) * cellSize) + ((week(d) - week(new Date(d.getFullYear(),d.getMonth(),1))) * cellMargin) + cellMargin );\n                        const y = ((day(d) * cellSize) + (day(d) * cellMargin) + cellMargin)\n                        const rect = <rect className=\"day\"\n                            key={'p'+j}\n                            y={y}\n                            x={x}\n                            title={d}\n                            width={cellSize}\n                            height={cellSize}\n                            strokeWidth=\"2\"\n                            stroke=\"transparent\"\n                            rx=\"3\" ry=\"3\" fill=\"#333\" />;\n\n                        return rect;\n\n                      }\n                    )}\n\n\n                    {true && days[idx].entries.map((d, k) => {\n\n                        const key = `${d.day}-${d.month}-${d.year}`;\n\n                        const x = (((week(d.date) - week(new Date(d.date.getFullYear(),d.date.getMonth(),1))) * cellSize) + ((week(d.date) - week(new Date(d.date.getFullYear(),d.date.getMonth(),1))) * cellMargin) + cellMargin );\n                        const y = ((day(d.date) * cellSize) + (day(d.date) * cellMargin) + cellMargin)\n                        const { count, date, items } = accumulateByDayDictionary[key];\n                        const rect = <rect className=\"day\"\n                            key={'k'+k}\n                            y={y}\n                            x={x}\n                            width={cellSize}\n                            height={cellSize}\n                            strokeWidth=\"2\"\n                            stroke=\"transparent\"\n                            rx=\"3\" ry=\"3\"\n                            fill={this.colorScale(count)}\n                           />;\n\n                        return (\n                          <Popup trigger={rect} flowing style={{ maxWidth: '300px'}}>\n                          <Popup.Header>\n                            <Icon name='calendar' /> { date.toDateString() }\n                            <Label circular big color='red' floating>{ count }</Label>\n                            <Divider />\n                          </Popup.Header>\n\n                          <Popup.Content>\n\n                            <List bulleted style={{ textAlign: 'left' }}>\n                              {items.map(d => (\n                                <List.Item>{d.title}</List.Item>\n                              ))}\n\n                            </List>\n\n                          </Popup.Content>\n                          </Popup>\n                        )\n\n                      }\n                    )}\n\n                </g>\n              </svg>);\n          })\n\n      }\n      </div>\n    );\n  }\n}\n\nexport default CalendarChart;\n\n\n// {\n//   months && months.map(m => {\n//     const width = this.getMonthWidth(m);\n//     return (<svg className=\"month\" width={width} height={((cellSize * 7) + (cellMargin * 8) + 20)}>\n//       <g>\n//         <text\n//           textAnchor=\"middle\"\n//           className=\"month-name\"\n//           fill=\"white\"\n//           x={this.getTextX(m)}\n//           y={(cellSize * 7) + (cellMargin * 8) + 15}> {monthName(m)} </text>\n//           {[1, 2, 3, 4, 5].map((d, i) => (\n//             <rect className=\"day\"\n//               y={cellSize*i}\n//               x={cellSize*i}\n//               width={cellSize}\n//               height={cellSize}\n//               rx=\"3\" ry=\"3\" fill=\"#333\" />\n//           ))}\n//           {/*days & days.map((d, i) => {\n//             // const y = (d.day * cellSize) + (d.day * cellMargin) + cellMargin;\n//             // const x = ((week(d.date) - week(d.date)) * cellSize) + ((week(d.date) - week(d.date)) * cellMargin) + cellMargin;\n//             return (<rect className=\"day\"\n//               y={cellSize*i}\n//               x={cellSize*i}\n//               width={cellSize}\n//               height={cellSize}\n//               rx=\"3\" ry=\"3\" fill=\"#eaeaea\" />)\n//           })*/}\n//         }\n","import React from 'react';\nimport * as d3 from 'd3';\n\nconst width = 700;\nconst height = 100;\nconst margin = { top: 20, right: 20, bottom: 60, left: 20 };\n\nclass YearTimelineChart extends React.Component  {\n\n  barsWidth = 0;\n\n  processData(data) {\n\n    if (!data) {\n      this.setState({ circles: [] });\n      return;\n    }\n\n    // const extent = d3.extent(data, d => d.year);\n     const xScale = d3\n       .scaleBand().padding(1).domain(data.map(d => d.year).sort((a, b) => a.year - b.year))\n       .range([ margin.left, width - margin.right]);\n\n     const [minCount, maxCount] = d3.extent(data, d => d.count);\n     const radiusScale = d3\n      .scaleLinear()\n      .range([10, 30])\n      .domain([0, maxCount]);\n\n     const colorScale = d3\n      .scaleSequential(d3.interpolateReds)\n      .domain([maxCount*1.5, minCount]);\n\n     const circles = data.map(d => {\n       return {\n         x: xScale(d.year),\n         year: d.year,\n         count: d.count,\n         radius: radiusScale(d.count),\n         fill: colorScale(d.count)\n       };\n     });\n\n     this.setState({ circles })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      circles: null,\n      selected: null\n    }\n  }\n  onCircleClick(year) {\n    this.props.selectYear(year)\n  }\n  componentDidMount() {\n    this.processData(this.props.data);\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.selected !== prevProps.selected) {\n      this.processData(this.props.data);\n    }\n  }\n\n  render() {\n\n    const { circles } = this.state;\n    const { selected } = this.props;\n\n    return (\n      <div style={{ width: \"100%\" }}>\n        {circles &&\n          <svg ref=\"svg\" width={width} height={height}>\n            <g transform={`translate(0, ${height / 2})`}>\n              {circles.map((d, i) => (\n                <g key={i} styles={{ cursor: 'pointer' }}>\n                  {(selected && selected === d.year) &&\n                    <circle r={d.radius + 5} cx={d.x} cy=\"0\" fill=\"transparent\" stroke={d.fill} strokeWidth=\"4\"/>\n                  }}\n                  <circle onClick={() => this.onCircleClick(d.year)} r={d.radius} cx={d.x} cy=\"0\" fill={d.fill} stroke={d.fill} strokeWidth=\"1\"/>\n                </g>\n              ))}\n            </g>\n          </svg>\n        }\n      </div>\n    );\n  }\n}\n\nexport default YearTimelineChart;\n","import React from 'react';\nimport { Statistic, Icon } from 'semantic-ui-react'\nimport { CUSTOM_RED } from '../../globals/colors';\n\nconst SimpleStats = ({ headerText, value, footerText, iconClass = null }) => (\n  <Statistic size=\"tiny\" color=\"red\" inverted>\n      <Statistic.Label>{ headerText }</Statistic.Label>\n      <Statistic.Value style={{ color: CUSTOM_RED }}>{ value }\n        { iconClass && <Icon name={ iconClass } />}\n      </Statistic.Value>\n      { footerText && <Statistic.Label>{ footerText }</Statistic.Label> }\n  </Statistic>\n);\n\nexport default SimpleStats\n","import React, { useState, useEffect } from 'react';\nimport { Icon } from 'semantic-ui-react'\nimport TimeAgo from 'javascript-time-ago'\nimport en from 'javascript-time-ago/locale/en'\n\nimport SimpleStats from './SimpleStats';\n\n// TODO use lib\nconst days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nconst FirstEpisodeStatistics = ({ episode }) => {\n\n  const [ timeAgo, setTimeAgo ] = useState(null);\n  const [ dayOfWeek, setDayOfWeek ] = useState(null);\n\n  useEffect(() => {\n    // Add locale-specific relative date/time formatting rules.\n    TimeAgo.addLocale(en)\n    // Create relative date/time formatter.\n    const timeAgo = new TimeAgo('en-US')\n    setTimeAgo(timeAgo.format(episode.date));\n    setDayOfWeek(days[episode.date.getDay()])\n  }, [ episode ]);\n\n  return (\n\n    <div>\n      <div>\n        <div>\n          <Icon size=\"big\" color=\"red\" name=\"tv\" />\n        </div>\n        <SimpleStats\n          headerText=\"your first episode EVER is\"\n          value={ episode.title }\n        />\n        </div>\n        <br/>\n        <br/>\n        <div>\n          <div>\n            <Icon size=\"big\" color=\"red\" name=\"hourglass outline\" />\n          </div>\n\n        <SimpleStats\n          headerText=\"and you saw it\"\n          value={ timeAgo }\n          footerText={`(it was ${dayOfWeek})`}\n        />\n      </div>\n    </div>);\n}\n\nexport default FirstEpisodeStatistics\n","import React, { useState, useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react'\n\nimport HorizontalDivider from '../components/HorizontalDivider';\nimport RadialChart from '../components/charts/RadialChart';\nimport BarChart from '../components/charts/BarChart';\nimport CalendarChart from '../components/charts/CalendarChart';\nimport YearTimelineChart from '../components/charts/YearTimelineChart';\nimport FirstEpisode from '../components/statistics/FirstEpisode';\nimport SimpleStats from '../components/statistics/SimpleStats';\n\n\n// TODO this is duplicated in FirstEpisode compnent\nconst days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nexport default function StatScreen({ data, yearsList, currentYear }) {\n\n  const [episodePerMonth, setEpisodePerMonth] = useState(null);\n  const [year, setYear] = useState(null);\n\n  useEffect(() => {\n    setYear(currentYear)\n    setEpisodePerMonth(data.episodesPerMonth.filter(data => data.year === currentYear)[0]);\n  }, [ data, currentYear ]);\n\n  const getYearSection = year => {\n    const episodesXMonth = data.episodesPerMonth.filter(data => data.year === year)[0]\n    return (<Grid.Column key={year}>\n\n      <HorizontalDivider text={`STATS FOR ${year}`} />\n\n      {(episodesXMonth && episodesXMonth.data) &&\n        <RadialChart\n          selected={year}\n          data={episodesXMonth.data}\n        />\n      }\n      <br/><br/>\n\n      { (data.episodesPerMonth && data.accumulateByDayDictionary) &&\n        <CalendarChart\n          selected={year}\n          data={data.episodesPerMonth}\n          accByDate={data.accumulateByDayDictionary}\n        />\n      }\n    </Grid.Column>)\n  };\n\n  return (\n    <Grid columns={1}>\n\n\n      <Grid.Column>\n        <HorizontalDivider text=\"YOUR FIRST TIME\" />\n      </Grid.Column>\n\n      <Grid.Column>\n        <FirstEpisode episode={ data.sampleData[0] }/>\n      </Grid.Column>\n\n      <Grid.Column>\n        <HorizontalDivider text=\"FUN FACTS\" />\n      </Grid.Column>\n\n\n      <Grid.Column>\n\n        { (data.sampleData) &&\n          <SimpleStats\n            headerText=\"Overall, you saw\"\n            value={data.sampleData.length}\n            footerText=\"episodes\"\n          />\n        }\n\n        { (data.accumulateByWeekDay) &&\n          <SimpleStats\n            headerText=\"Mostly on\"\n            value={`${days[data.accumulateByWeekDay[0].weekDay]}s` }\n            footerText={`(and ${days[data.accumulateByWeekDay[1].weekDay]}s)` }\n          />\n        }\n\n        { (data.mostActiveDay) &&\n          <SimpleStats\n            headerText=\"with a record of\"\n            value={data.mostActiveDay.count}\n            footerText=\"in one day\"\n          />\n        }\n\n      </Grid.Column>\n\n      <Grid.Column>\n        <HorizontalDivider text=\"EPISODES PER YEAR\" />\n      </Grid.Column>\n\n\n      <Grid.Column>\n\n        { (data.episodesPerYear) &&\n          <BarChart\n            data={data.episodesPerYear}\n          />\n        }\n      </Grid.Column>\n\n      <Grid.Column>\n        { yearsList && [...yearsList].reverse().map(y => getYearSection(y)) }\n      </Grid.Column>\n\n      {false && <>\n        <Grid.Column>\n        <HorizontalDivider text={`SOME STATS FOR ${year}`} />\n      </Grid.Column>\n\n\n      <Grid.Column>\n\n        { (data.episodesPerYear) &&\n          <YearTimelineChart\n            selectYear={(nextSelectedYear) => setYear(nextSelectedYear)}\n            selected={year}\n            data={data.episodesPerYear}\n          />\n        }\n\n        { (year && episodePerMonth && episodePerMonth.data) &&\n          <RadialChart\n            selected={year}\n            data={episodePerMonth.data}\n          />\n        }\n      </Grid.Column>\n\n      <Grid.Column>\n        { (year && data.episodesPerMonth && data.accumulateByDayDictionary) &&\n          <CalendarChart\n            selected={year}\n            data={data.episodesPerMonth}\n            accByDate={data.accumulateByDayDictionary}\n          />\n        }\n      </Grid.Column>\n</>\n    }\n\n\n    </Grid>\n  );\n};\n","import React from 'react';\nimport { List } from 'semantic-ui-react'\n\nimport './App.css';\n\nimport { parseCsv } from './services/ntflxCsvParser';\n\nimport SiteHeader from './components/SiteHeader';\nimport HeaderHelp from './components/HeaderHelp';\nimport MainScreen from './screens/MainScreen';\nimport StatScreen from './screens/StatScreen';\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataLoaded: false,\n      currentYear: null,\n      // yearsList: null,\n      data: null // remove\n    };\n  }\n\n  onFileUploaded = (csvString) => {\n\n      const {\n        sampleData,\n        yearsList,\n        episodesPerMonth,\n        episodesPerYear,\n        mostActiveDay,\n        accumulateByDayDictionary,\n        accumulateByWeekDay,\n      } = parseCsv(csvString);\n\n      this.setState({\n        dataLoaded: true,\n        yearsList,\n        currentYear: yearsList[0],\n        data: {\n          sampleData,\n          episodesPerMonth,\n          episodesPerYear,\n          mostActiveDay,\n          accumulateByDayDictionary,\n          accumulateByWeekDay,\n        }\n      })\n    }\n\n  render() {\n    const {\n      currentYear,\n      dataLoaded,\n      data,\n      yearsList,      \n    } = this.state;\n\n    return (\n      <div className=\"App\">\n\n        <SiteHeader />\n\n        { !dataLoaded &&\n          <>\n            <HeaderHelp />\n            <MainScreen onFileUploaded={ this.onFileUploaded } />\n          </>\n        }\n\n        { dataLoaded &&\n          <StatScreen data={data} yearsList={yearsList} currentYear={currentYear} />\n        }\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}